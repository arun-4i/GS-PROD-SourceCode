---
description: Connection pooling and transaction management standards for node-oracledb backend development.
globs:
  - "**/*"
alwaysApply: false
---

# Connection Pooling and Transaction Management

This file defines connection pooling and transaction management standards for backend development using node-oracledb. For related database standards, see other files in the database folder.

## Connection Pooling

- Configure node-oracledb connection pool in config/database.ts
- Example:

```ts
import oracledb from "oracledb";
const pool = await oracledb.createPool({
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  connectString: process.env.DB_CONNECT_STRING,
  poolMin: 0,
  poolMax: 10,
  poolIncrement: 1,
});
```

## Transaction Management

**MANDATORY: Use SSOT Database Wrapper**

All database operations MUST use `withDatabaseConnection()` wrapper:

```ts
import { withDatabaseConnection } from "../utils/databaseWrapper";

// Repository method example
async someMethod(): Promise<Entity[]> {
  return withDatabaseConnection(async (connection) => {
    const result = await connection.execute(sql, binds, {
      outFormat: require("oracledb").OUT_FORMAT_OBJECT,
    });
    return result.rows as Entity[];
  }, "someMethod");
}
```

**Legacy Manual Pattern (DO NOT USE):**

```ts
// DEPRECATED - Do not use manual connection management
const connection = await pool.getConnection();
try {
  // ... operations
} finally {
  await connection.close();
}
```

- For DB package calls, use bind variables for all parameters.
- Always handle errors and roll back on failure.

## Oracle Helper Utilities

For common database operations, use centralized helpers:

```ts
import {
  executeCountQuery,
  getNextSequenceValue,
} from "../utils/oracleHelpers";

// Count records
const count = await executeCountQuery("TABLE_NAME", "WHERE_CLAUSE", binds);

// Get next sequence value
const nextId = await getNextSequenceValue("SEQUENCE_NAME");
```

## Best Practices

- **MANDATORY**: Use `withDatabaseConnection()` wrapper for ALL database operations
- Use `executeCountQuery()` for count operations instead of manual queries
- Use `getNextSequenceValue()` for sequence generation
- Always use bind variables to prevent SQL injection
- Reference [rules/database/entities.mdc] for entity and DB package usage standards

---
