---
description: Input validation and sanitization using Zod schemas.
globs:
  - "**/*"
alwaysApply: false
---

# Input Validation, Sanitization, and Zod Schemas

This file defines input validation and sanitization standards for backend development. For related security standards, see other files in the security folder.

## Input Validation

**MANDATORY: Use SSOT Common Schemas**

All validators MUST use common schemas from `validators/common.ts`:

```ts
import {
  apiResponseSchema,
  optionalString,
  optionalNumber,
  requiredString,
  requiredNumber,
  createValidationErrorResponse,
} from "../validators/common";

// Entity schema example
const userSchema = z.object({
  email: requiredString.email(),
  name: optionalString,
  age: optionalNumber,
});

// API response schema (for all routes)
const userResponseSchema = apiResponseSchema;
```

## Sanitization

- Sanitize all inputs to prevent XSS, SQL injection, and other attacks
- Use libraries like DOMPurify for HTML, or custom sanitizers for strings
- Never trust client input

## Zod Schema Usage

- Define schemas in validators/ directory
- Use schemas for both validation and Swagger/OpenAPI docs
- Keep schemas DRY and reusable

## Compliance

- Follow OWASP input validation guidelines
- Reference [rules/security/encryption.mdc] and [rules/security/authentication.mdc] for related standards
  description:
  globs:
  alwaysApply: false

---
