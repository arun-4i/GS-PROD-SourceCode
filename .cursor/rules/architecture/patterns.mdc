---
description: Architecture strategy for controller, service and repository layers
alwaysApply: false
---

# Architecture Patterns: Repository, Service, Controller

This file defines the core backend architecture patterns for this project. For related standards, see other modular rule files referenced in .cursorrules.

## Repository Pattern

**MANDATORY: Use SSOT Database Wrapper**

All repositories MUST use `withDatabaseConnection()`:

```ts
import { withDatabaseConnection } from "../utils/databaseWrapper";
import { executeCountQuery } from "../utils/oracleHelpers";

export class UserRepository {
  async findById(id: number): Promise<User | null> {
    return withDatabaseConnection(async (connection) => {
      const result = await connection.execute(sql, [id], {
        outFormat: require("oracledb").OUT_FORMAT_OBJECT,
      });
      return (result.rows[0] as User) || null;
    }, "findById");
  }

  async getCount(): Promise<number> {
    return executeCountQuery("users", "active = :active", { active: 1 });
  }
}
```

## Service Layer

**MANDATORY: Use SSOT Response Utilities**

All services MUST use centralized response utilities:

```ts
import {
  createSuccessResponse,
  createErrorResponse,
} from "../validators/common";

export class UserService {
  constructor(private repo: UserRepository) {}

  async updateUser(id: number, data: UpdateUserDto): Promise<APIResponse> {
    try {
      // business logic
      const result = await this.repo.update(id, data);
      return createSuccessResponse(result);
    } catch (error) {
      return createErrorResponse(500, "Error updating user", error);
    }
  }
}
```

## Controller Layer

**MANDATORY: Use SSOT Controller Helpers**

All controllers MUST use centralized controller helpers:

```ts
import {
  createControllerHandler,
  createGetHandler,
  validateArrayBody,
} from "../utils/controllerHelpers";

export class UserController {
  // POST endpoint with validation
  updateUser = createControllerHandler(
    (body: unknown) => this.userService.updateUser(body as any),
    (body) => validateArrayBody(body, "users")
  );

  // GET endpoint
  getAllUsers = createGetHandler(() => this.userService.getAllUsers());
}
```

**Legacy Manual Pattern (DO NOT USE):**

```ts
// DEPRECATED - Do not use manual try/catch in controllers
export const updateUser = async (req, res, next) => {
  try {
    const result = await userService.updateUser(req.params.id, req.body);
    res.json({ success: true, data: result });
  } catch (err) {
    next(err);
  }
};
```

## Best Practices

- Strict separation of concerns
- Use dependency injection for services/repositories
- No direct DB/model access in controllers/services (always via repository)
- Reference [rules/architecture/structure.mdc] for file organization
  description:
  globs:
  alwaysApply: false

---
